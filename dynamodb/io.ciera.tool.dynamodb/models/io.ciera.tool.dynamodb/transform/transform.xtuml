-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("87fad3ab-86e1-49c0-8a35-839a8fbcf955",
	"009ed1c2-fc19-4903-9f15-147dbd00652a",
	"009ed1c2-fc19-4903-9f15-147dbd00652a",
	'transform',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("e0815aa5-54cc-4a59-93f2-63778fe95413",
	112,
	"87fad3ab-86e1-49c0-8a35-839a8fbcf955",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'io.ciera.tool.dynamodb::transform');
INSERT INTO DIM_DIA
	VALUES ("e0815aa5-54cc-4a59-93f2-63778fe95413",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("47251ef0-f93a-4fca-bc4e-3ab949cc470c",
	"00000000-0000-0000-0000-000000000000",
	'transformDynamoDBLoader',
	'',
	'comp_def = param.comp_def;
select one comp_def_file related by comp_def->File[R401];

// create the file
create object instance file of File;
file.name = comp_def.name + "DynamoDBLoader";
file.path = comp_def_file.path;
file.package = ::pathToPackage( path:file.path );
file.extension = ".java";
file.exclude = false;

// create the general file
create object instance general_file of GeneralFile;
relate general_file to file across R401;

// create the instance population loader
create object instance pop_loader of Z_PopulationLoader;
relate pop_loader to general_file across R3009;
pop_loader.comp_name = comp_def.name;

// create loaders and serializers for classes
select many objs related by comp_def->Class[R408];
for each obj in objs
  // check if the class is persistent
  select one o_obj related by obj->O_OBJ[R409];
  select one pe related by o_obj->PE_PE[R8001];
  marking_path = ::containerMarkingPath( pe:pe ) + "::" + o_obj.Name;
  select any non_persistent_mark from instances of Mark where ( selected.markable_name == "Model Class" and
                                                                selected.path == marking_path and
                                                                selected.feature_name == "NonPersistent" );
  if ( empty non_persistent_mark )
    ::transformClassInstanceLoaderSerializer( obj:obj, pop_loader:pop_loader );
  end if;
end for;

select many evts related by objs->StateMachine[R4750]->Event[R4752];
if ( not_empty evts )

  // create loader serializer for timers
  ::transformTimerLoaderSerializer( pop_loader:pop_loader );
  
  // create loaders and serializers for events
  for each evt in evts
    ::transformEventInstanceLoaderSerializer( evt:evt, pop_loader:pop_loader );
  end for;

end if;

// create batch relators for relationships
select many rels related by comp_def->Relationship[R448];
for each rel in rels
  select one part_o_obj related by rel->Class[R434]->O_OBJ[R409];
  select one part_pe related by part_o_obj->PE_PE[R8001];
  select any part_non_persistent_mark from instances of Mark where ( selected.markable_name == "Model Class" and
                                                                     selected.path == ::containerMarkingPath( pe:part_pe ) + "::" + part_o_obj.Name and
                                                                     selected.feature_name == "NonPersistent" );
  select one form_o_obj related by rel->Class[R435]->O_OBJ[R409];
  select one form_pe related by form_o_obj->PE_PE[R8001];
  select any form_non_persistent_mark from instances of Mark where ( selected.markable_name == "Model Class" and
                                                                     selected.path == ::containerMarkingPath( pe:form_pe ) + "::" + form_o_obj.Name and
                                                                     selected.feature_name == "NonPersistent" );
  if ( empty part_non_persistent_mark and empty form_non_persistent_mark )
    ::transformBatchRelator( rel:rel, pop_loader:pop_loader );
  end if;
end for;

// create import block
::addStringToImports( file:file, s:"io.ciera.runtime.instanceloading.dynamodb.DynamoDBLoader", type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.runtime.instanceloading.IChangeLog", type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.runtime.instanceloading.IModelDelta", type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.runtime.instanceloading.IInstanceDeletedDelta", type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.runtime.instanceloading.IAttributeChangedDelta", type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.runtime.instanceloading.IInstanceCreatedDelta", type:ImportType::IMPL );
::addStringToImports( file:file, s:"io.ciera.runtime.summit.exceptions.XtumlException", type:ImportType::IMPL );
::addStringToImports( file:file, s:"com.amazonaws.services.dynamodbv2.document.Table", type:ImportType::IMPL );

select any int_loader related by pop_loader->Z_InstanceLoader[R3005]->Z_AttributeLoader[R3006]->Z_IntegerLoader[R3008] where ( not selected.is_long );
if ( not_empty int_loader )
  ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.IntegerUtil", type:ImportType::IMPL );
end if;
select any long_loader related by pop_loader->Z_InstanceLoader[R3005]->Z_AttributeLoader[R3006]->Z_IntegerLoader[R3008] where ( selected.is_long );
if ( not_empty long_loader )
  ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.LongUtil", type:ImportType::IMPL );
end if;
select any real_loader related by pop_loader->Z_InstanceLoader[R3005]->Z_AttributeLoader[R3006]->Z_RealLoader[R3008];
if ( not_empty real_loader )
  ::addStringToImports( file:file, s:"io.ciera.runtime.summit.types.RealUtil", type:ImportType::IMPL );
end if;

select any inst_serializer related by pop_loader->Z_InstanceSerializer[R3001];
if ( not_empty inst_serializer )
  ::addStringToImports( file:file, s:"com.amazonaws.services.dynamodbv2.document.Item", type:ImportType::IMPL );
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1b5998ac-b0c3-4a06-8be3-cb768bf46149",
	"47251ef0-f93a-4fca-bc4e-3ab949cc470c",
	'comp_def',
	"1fef1559-c5b6-4eb7-a9c4-8b126b9b51a0",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("1fef1559-c5b6-4eb7-a9c4-8b126b9b51a0",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component Definition>',
	'',
	'',
	'../../../../io.ciera.tool.core/models/io.ciera.tool.core/architecture/component/component.xtuml');
INSERT INTO PE_PE
	VALUES ("47251ef0-f93a-4fca-bc4e-3ab949cc470c",
	1,
	"87fad3ab-86e1-49c0-8a35-839a8fbcf955",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a56a1341-f6c7-4547-8f4e-c1be277ab671",
	"00000000-0000-0000-0000-000000000000",
	'transformDynamoDBLoaders',
	'',
	'select many comp_defs from instances of ComponentDefinition;
for each comp_def in comp_defs
  select any obj related by comp_def->Class[R408];
  if ( not_empty obj )  // only create population loader if there are classes
    ::transformDynamoDBLoader( comp_def:comp_def );
  end if;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("a56a1341-f6c7-4547-8f4e-c1be277ab671",
	1,
	"87fad3ab-86e1-49c0-8a35-839a8fbcf955",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("87fad3ab-86e1-49c0-8a35-839a8fbcf955",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("009ed1c2-fc19-4903-9f15-147dbd00652a",
	'io.ciera.tool.dynamodb',
	1,
	'../io.ciera.tool.dynamodb.xtuml');
